<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[验证码识别：找回四六级准考证号]]></title>
    <url>%2Fverify-code.html%2F</url>
    <content type="text"><![CDATA[摘要 一晃时间过的真快，距离上次更新博客已经将近10天了，这十天来也没闲着，回家终于把杀千刀的科目三过了，再也不用看到教练那张凶神恶煞的脸。前段时间四六级考试成绩公布了，小伙伴们是不是都第一时间忙着去查自己的成绩，相信有很多小伙伴跟我一样苦逼，幸幸苦苦复习了好长时间，查成绩的时候却忘了自己的准考证号（温馨提示：以后考试之前一定要记得把准考证拍一张存起来）。在网上试过无数种找回办法后，我彻底绝望了。既然别人不靠谱，咱就靠自己，经过两天的努力之后，终于成功的找回了准考证号。这篇博客主要来介绍解决这个问题的一些方法和思路。 文章概览 基本思路 训练模型 获取训练数据 处理数据 生成模型 查询操作 发送请求 使用代理 多线程 使用教程 基本思路&emsp;&emsp;对于查询四六级成绩来说，官方的查询入口有学信网和中国教育考试网，查询成绩需要提交的数据包括准考证号、姓名和验证码。要想查询到成绩，最简单的办法就是手工枚举准考证号，一个一个的尝试。我们知道四六级准考证的组成如下所示（第10位表示类别，四级是1，六级是2）：也就是说对于在同在一个考点的人来说前十位都是一致的（四级和六级不同），后面五位分别表示考场号和座位号（座位号从01到30），在我们忘记了考场号和座位号的情况下，我们至少要手工枚举几千次才有可能查询到成绩，这个工作难度可想而知。那如果我们不采用手工的方式进行枚举，而采用程序自动进行枚举呢？通过程序枚举准考证号不是什么问题，但是查询参数中包含验证码，现在需要解决地就是如何识别验证码。对于验证码地识别问题，我们可以利用机器学习的相关算法，建立识别模型，再利用识别模型来进行识别验证码。对于学信网和中国教育考试网两个网站，它们采用的验证码不同，学信网的验证码比较复杂，包含汉字等特殊字符，识别难度大，而中国教育考试网的验证码相对来说比较常规，识别难度相对小一点，本文的查询操作都是基于后者而言的。&emsp;&emsp;那么我们解决问题地大致思路就是：首先我们要获取大量的验证码数据，然后选择算法训练识别验证码的模型，最后通过重复识别查询页面的验证码，提交查询数据，分析响应数据来获得最终的结果。 训练模型 获取训练数据&emsp;&emsp;通过抓取请求相应过程中的数据包，我们可以得到获取验证码的地址。 其中ik表示准考证号，我们可以随便填一个，t表示时间戳（这个可以不用管），我们可以不断地向这个地址发送请求，服务器的响应结果即为验证码的地址，我们再向获取到的验证码的地址发送请求，就可以得到验证码。 具体代码如下所示（该项目的所有代码都可以在我的Github中找到）： 12345678910# 获取验证码def save_image_to_file(): myid = "123456789110211" new_id = myid.format(id=myid) img_api_url = image_api.format(id=new_id) img_api_resp = requests.get(img_api_url, headers=img_api_headers,timeout=10) img_url, filename = get_image_url_and_filename(img_api_resp.text) r = requests.get(img_url) with open("images/raw_picture/" + filename, "wb+") as f: f.write(r.content) 处理数据&emsp;&emsp;获取到一定数量的验证码图片后（大概需要100多张，收集的图片越多越好，之后我们会讲到一种快速收集和标注验证码的方法），接下来我们需要对获取到的验证码进行相应的处理。因为对于验证码的识别，我们一般采取监督学习的算法训练模型，所以首先要对获取到的验证码进行标注，即将验证码图片的文件名改为验证码对应的数字和字母组合，这一步必须要人工进行操作。然后，为了提高验证码识别的准确率，训练更好的识别模型，我们需要对验证码图片进行相应的处理，如灰度处理、二值化、降噪。经过这些手段处理后的验证码更能体现出图片本身的特征，同时也减小了训练模型时的计算量，具体代码如下所示。 1234567891011121314# 灰度处理，二值化（降噪部分的代码去掉了，效果不是太理想）def img_denoise(img, threshold): def init_table(threshold=threshold): table = [] for i in range(256): if i &lt; threshold: table.append(0) else: table.append(1) return table img = img.convert("L").point(init_table(), '1') return img &emsp;&emsp;下面我们要对验证码进行分割，因为在识别的时候，我们是识别单个的数字或字母，所以我们要将验证码进行切分，提取出每个字符对应的区域，切割后的每张图片大小一致。 1234567891011121314# 图片分割,参数img_split_start指定起始位置，参数img_split_width指定切割图片宽度def img_split(img,img_split_start,img_split_width): start = img_split_start width = img_split_width top = 0 height = img.size[1] img_list = [] for i in range(4): new_start = start + width * i box = (new_start, top, new_start + width, height) piece = img.crop(box) #piece.save("%s.jpg" % i) img_list.append(piece) return img_list &emsp;&emsp;图片切割完成后，数据处理的最后一步是将切割后的图片转化为numpy array的形式。 123456# 将Image对象转换为array_listdef img_list_to_array_list(img_list): array_list = [] for img in img_list: array_list.append(array(img).flatten()) return array_list 以上这些操作大家可以在我的GitHub的项目文件中通过preprocessing()、make_train_data()和img_to_array()三个函数实现。 生成模型&emsp;&emsp;生成模型主要用到的就是sklearn机器学习库中相关的算法，验证码识别属于分类任务，对于分类任务我们可以采用K近邻、支持向量机、决策树和神经网络等算法，这里我们采用的是支持向量机。 123456789# 训练模型def svm_model(x_data,y_data): SVM = svm.SVC() x_train,x_test,y_train,y_test = train_test_split(x_data,y_data,random_state=14) SVM.fit(x_train,y_train) y_predict = SVM.predict(x_test) average_accuracy = np.mean(y_test==y_predict)*100 print("准确率为：&#123;0:.1f&#125;%".format(average_accuracy)) pickle.dump(SVM, open("model.pkl", "wb+")) 模型训练好之后，将模型对象存储在model.pkl文件中，需要识别验证码时，只需要读取model.pkl文件即可获得识别模型，不需要再次训练。 查询操作发送请求&emsp;&emsp;模型训练好之后，我们就可以进行查询操作了。这一阶段的大致思路是，先获取查询页面的验证码，通过识别模型进行识别，然后再向服务器提交请求参数，包括枚举的准考证号、姓名和验证码。如果服务器返回验证码错误，则重复以上操作。如果服务器返回查询结果为空则说明验证码正确，但是准考证号和姓名不一致，此时可以枚举下一个准考证号，重复操作一直到获得正确结果为止。 &emsp;&emsp;由于一开始我们训练模型时使用的训练数据量很小，所以该识别模型识别的准确率比较低，那么如何提高模型识别的准确率呢。最好的办法就是增大训练数据的数量，训练新的模型。这里提供一个更快更方便获取训练数据的方法，在发送请求的代码中，我们加入两行代码（倒数第三行和倒数第二行），该代码的作用时将识别正确的验证码加入到训练数据的文件夹中，并且会自动进行标注，可以通过该方式一边查询，一边收集大量的训练数据。我的项目中，一开始手工标注的验证码有200张，训练模型后采用这种方式自动收集了1600多张验证码，然后利用所有的训练数据重新建立模型，识别的准确率提高了30%。（但是这样的做法存在一个过拟合的问腿，训练模型对于类似于一开始200张验证码的图片的识别准确率比较高，而对于其他类型的图片识别的准确率比较低。不过这个问题对于我们找回准考证号影响不大，提高准确率最好的就是一开始手工标注更多的验证码） 123456789101112131415161718192021222324252627282930313233343536# 发送请求def send_query_until_true(num): # 生成准考证号 global proxy new_id = myid.format(id=num) # 获取验证码图片地址 img_api_url = image_api.format(id=new_id) while True: try: img_api_resp = requests.get(img_api_url, headers=img_api_headers,timeout=10,proxies=proxy) img_url, filename = get_image_url_and_filename(img_api_resp.text) # 获取验证码图片并猜测 img_resp = requests.get(img_url, timeout=10, proxies=proxy) if img_resp.status_code == 200: images = Image.open(BytesIO(img_resp.content)) code = img_verify_code(images) else: code = "xxxx" except Exception: print("重新获取代理") p = str(get_proxy()) proxy = &#123;'http': 'http://' + p, 'https': 'http://' + p&#125; else: break # CET4成绩查询选项 # data = &#123;"data": "CET4_181_DANGCI,&#123;id&#125;,&#123;name&#125;".format(id=new_id, name=name),"v": code&#125; # CET6成绩查询选项 data = &#123;"data": "CET6_181_DANGCI,&#123;id&#125;,&#123;name&#125;".format(id=new_id, name=name),"v": code&#125; query_resp = requests.post(query_api, data=data, headers=query_api_headers) query_text = query_resp.text log_info(query_text.split("'")[3],new_id) if "验证码错误" in query_text: query_text = send_query_until_true(num) # elif "您查询的结果为空" in query_text: # images.save("images/save_picture/" + code + ".png") return query_text 使用代理&emsp;&emsp;在上面那段代码中，我们在请求过程中使用了代理，是为了防止频繁请求导致ip被封，代理功能可以自动切换代理，保证程序的正常运行。在测试过程中我们发现，该网站不会对ip进行封锁，所以代理可有可无。这里大致说一下代理功能是如何实现的。 &emsp;&emsp;代理功能使用的代理池是Github上的开源项目，它通过从代理平台抓取可用的代理ip存储到本地Redis中，需要使用代理时，即从本地Redis中取出。使用代理功能需要进行相应的配置。 123安装并开启Redis服务器安装依赖 pip3 install -r requirements.txt开启代理服务 python run.py &emsp;&emsp;在上述代码中，我们使用了捕捉异常的语句，因为在使用代理的过程中我们发现代理ip可能存在网络不稳定，传输有延时等问题。总的来说，使用代理的查询速度很慢，不想使用代理的话直接将proxy配置成本地的ip和端口即可。 多线程&emsp;&emsp;在开发过程中，想过用多线程，但是效果不太理想（对并行编程不熟悉），后来想想对于查找准考证号这种问题可以根据实际情况灵活，可能有些人会大致记得自己的考场位于哪个区间之内，所以在项目中，提供了输入查询区间的接口。如果想提高查询速度，可以开启多个终端，每个终端输入不同的查询区间，这样就类似于开启了多进程（一般查询的时候开启10个终端，每个终端的考场区间为10，10分钟内可以查询到结果）。 使用教程&emsp;&emsp;简单介绍一下该项目的文件结构，如图所示。 images：主要用来存放验证码图片，images中包含多个目录，row_picture存放原始验证码，change_picture存 * 放灰度化、二值化处理后的验证码，train_data存放分割后的验证码 proxypool：实现代理功能的相关代码 acquire_picture.py：包含验证码获取、处理相关操作的代码 model.pkl：存放识别模型 recongnition_code.py：项目的执行入口，包含向服务器发送请求、代理等相关代码 setting.py：项目相关的配置文件 train_data_preprocessing.py：整合验证码获取和处理相关操作 train_model.py：训练模型 &emsp;&emsp;该项目使用的大致流程如下（要求python版本不低于3.5，该项目在win10环境测试运行无误）。 123456安装相关依赖PIL、requests、numpyy、sklearn等修改recongnition_code.py文件中的myid（准考证号前10位）、name（自己的名字）修改recongnition_code.py文件中成绩查询选项如果需要使用代理，需要配置代理相关环境在项目文件夹中打开终端输入：python recongnition_code.py 开始区间 结束区间可同时开启多个终端，每个设置不同的区间，加快查找速度]]></content>
      <categories>
        <category>机器学习算法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>验证码识别</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年下半年学习计划]]></title>
    <url>%2Fplan.html%2F</url>
    <content type="text"><![CDATA[摘要: 即将开始研究生阶段的学习生活了，我希望这对于我来说是一个全新的开始。所有伟大的梦想都源于一个切实可行的计划，为了迎接即将开始的旅程，我也需要这样一个计划，希望在它的鞭策和激励下让我不断成长，奋力前行！ 计划大纲 2018.8.16-2018.9.1 机器学习算法实现系列博客（贝叶斯分类器和决策树） 学习python数据结构和算法 2018.9.2-2018.9.30 阅读高质量论文两篇 完成机器学习算法实现系列博客（大概5篇） 开始阅读《凸优化理论》 2018.10.1-2018.10.31 阅读高质量论文三篇 完成《凸优化理论》的学习 开始阅读流畅的python 博客写作三篇 2018.11.1-2018.11.30 阅读高质量论文三篇 完成流畅的python 学习javascript 博客写作三篇 2018.12.1-2018.12.31 阅读高质量论文三篇 学习node.js 阅读HTTP协议详解 博客写作三篇 2018.1.1-2018.1.31 阅读高质量论文三篇 搭建node.js网站 学习docker 博客写作三篇 八月学习计划完成情况]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTPS详解：SSL/TLS协议]]></title>
    <url>%2FTLS.html%2F</url>
    <content type="text"><![CDATA[摘要: 最近在看关于web安全相关的书籍，说到web安全HTTP和HTTPS之间的联系和区别是一个无法回避的问题。很长时间以来，我也被这个问题所困扰，对于其中涉及的细节问题更是难以触及，但是现在是该去好好考虑这个问题了。在网上查阅了大量资料之后，我发现很多文章在解释这个问题的时候含糊不清，让人难以理解。所以我写下了这篇博客，希望能给大家提供帮助，如有不足之处，欢迎指正！ 文章概览 区别与联系 HTTP和HTTPS 联系 区别 SSL和TLS 联系 区别 SSL/TLS协议 密码套件 记录协议 握手协议 前向安全 OPENSSL 区别与联系 HTTP和HTTPS联系&emsp;&emsp;HTTP（超文本传输协议）是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。可以从HTTP头、HTTP请求方法、HTTP状态码和统一资源定位符URL四个方面深入理解HTTP协议。&emsp;&emsp;超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，易遭受窃听、篡改、劫持等攻击，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL/TLS协议，SSL/TLS依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密，一次HTTPS协议实现了数据传输过程中的保密性、完整性和身份认证性。区别&emsp;&emsp;HTTP和HTTPS的主要区别如下包括:HTTPS协议需要到CA申请证书,而HTTP协议则不用；HTTP是超文本传输协议，信息是明文传输，而HTTPS则是加密传输；HTTP和HTTPS使用完全不同的连接方式，所占用的端口也不一样，前者占用80端口，后者占用443端口；HTTPS传输过程比较复杂，对服务端占用的资源比较多，由于握手过程的复杂性和加密传输的特性导致HTTPS传输的效率比较低；HTTP的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。SSL和TLS 联系&emsp;&emsp;SSL(Secure Sockets Layer 安全套接层)为Netscape所研发，用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取及窃听。SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。&emsp;&emsp;安全传输层协议（TLS）用于在两个通信应用程序之间提供保密性和数据完整性。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面，与具体的应用无关，所以，一般把TLS协议归为传输层安全协议。TLS 的最大优势就在于：TLS 是独立于应用协议。高层协议可以透明地分布在 TLS 协议上面。然而，TLS 标准并没有规定应用程序如何在 TLS 上增加安全性；它把如何启动 TLS 握手协议以及如何解释交换的认证证书的决定权留给协议的设计者和实施者来判断。&emsp;&emsp;SSL是Netscape开发的专门用户保护Web通讯的，而TLS1.0是IETF(工程任务组)制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本。两者差别很小，可以理解为SSL 3.1，它是写入了RFC的。为了兼顾各种说法本文将SSL和TLS统称为SSL/TLS，但是请注意，本文所涉及的关于各种协议的解析是基于TLS1.2版本（这是目前使用最广泛的版本）。 区别&emsp;&emsp;SSL和TLS的主要区别如下： 版本号：TLS记录格式与SSL记录格式相同，但版本号的值不同。 报文鉴别码：SSLv3.0和TLS的MAC算法及MAC计算的范围不同。TLS使用了RFC-2104定义的HMAC算法。SSLv3.0使用了相似的算法，两者差别在于SSLv3.0中，填充字节与密钥之间采用的是连接运算，而HMAC算法采用的是异或运算。但是两者的安全程度是相同的。 伪随机函数：TLS使用了称为PRF的伪随机函数来将密钥扩展成数据块，是更安全的方式。 报警代码：TLS支持几乎所有的SSLv3.0报警代码，而且TLS还补充定义了很多报警代码，如解密失败、记录溢出、未知、拒绝访问等。 加密计算：TLS与SSLv3.0在计算主密值（master secret）时采用的方式不同。 填充：用户数据加密之前需要增加的填充字节。在SSL中，填充后的数据长度要达到密文块长度的最小整数倍。而在TLS中，填充后的数据长度可以是密文块长度的任意整数倍（但填充的最大长度为255字节），这种方式可以防止基于对报文长度进行分析的攻击。 SSL/TLS协议 密码套件（cipher suite）&emsp;&emsp;密码套件（Cipher suite）是传输层安全（TLS）/安全套接字层（SSL）网络协议中的一个概念。在TLS 1.2中，密码套件的名称是以协商安全设置时使用的身份验证、加密、消息认证码（MAC）和密钥交换算法组成。TLS 1.3中的密码套件格式已经修改。在目前的TLS 1.3草案文档中，密码套件仅用于协商加密和HMAC算法。在创建一个TLS连接后，一次也称TLS握手协议的握手发生。在这个握手，一条ClientHello和一条ServerHello消息被发出。首先，客户端按照偏好的顺序发送它支持的密码套件的列表。然后服务器回复它从客户端的列表中选择的密码套件。&emsp;&emsp;例如TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,每个密码套件名称定义一个密钥交换算法、一个批量加密算法、一个消息认证码（MAC）算法，以及一个伪随机函数(PRF) 密钥交换算法，例如ECDHE_RSA，用于决定客户端与服务器之间在握手时如何身份验证 批量加密算法，例如AES_128_GCM，用于加密消息流。它还包括密钥大小及显式和隐式初始化向量（密码学随机数）的长度 消息认证码算法，例如SHA256，用于创建消息摘要，消息流每个数据块的加密散列 伪随机函数，例如TLS 1.2的伪随机函数使用MAC算法的散列函数来创建一个主密钥——连接双方共享的一个48字节的私钥。主密钥在创建会话密钥（例如创建MAC）时作为一个熵来源 理解密码套件的作用以及组成部分对我们理解握手协议的过程十分重要，因为使用不同的密码套件在握手协议的实现细节上有很大的不同，特别是密钥交换的过程。本文将主要讲解ECDHE_RSA密钥交换算法下的握手过程（也可以理解为三种不同密码套件的握手过程，对于握手过程而言不同套件的差异主要体现在密钥交换的过程，批量加密算法和消息验证码算法的不同主要体现在加密传输的过程，伪随机算法的不同体现在产生分组加密初始向量的过程）。 记录协议&emsp;&emsp;TLS记录协议位于TLS握手协议的下层，在可靠的传输协议(如TCP/IP)上层。TLS记录协议的一条记录包含长度字段、描述字段和内容字段。TLS记录协议处理数据的加密，即记录协议得到要发送的消息之后，将数据分成易于处理的数据分组，进行数据压缩处理(可选)，计算数据分组的消息认证码MAC，加密数据然后发送数据；接收到的消息首先被解密，然后校验MAC值，解压缩，重组，最后传递给协议的高层客户。记录协议有四种类型的客户：握手协议、警告协议、改变密码格式协议和应用数据协议。通常使用一个对称算法，算法的密钥由握手协议提供的值生成。TLS 记录协议提供的连接安全性具有两个基本特性: 私有――对称加密用以数据加密（DES 、RC4 等）。对称加密所产生的密钥对每个连接都是唯一的，且此密钥基于另一个协议（如握手协议）协商。记录协议也可以不加密使用 可靠――信息传输包括使用密钥的 MAC 进行信息完整性检查。安全哈希功能（ SHA、MD5 等）用于 MAC 计算。记录协议在没有 MAC 的情况下也能操作，但一般只能用于这种模式，即有另一个协议正在使用记录协议传输协商安全参数 握手协议&emsp;&emsp;TLS握手协议处理对等用户的认证，在这一层使用了公共密钥和证书，并协商算法和加密实际数据传输的密钥，该过程在TLS记录协议之上进行。TLS握手协议是TLS协议中最复杂的部分，它定义了10种消息，客户端和服务器利用这10种消息相互认证，协商哈希函数和加密算法并相互提供产生加密密钥的机密数据。TLS记录协议会在加密算法中用到这些加密密钥，从而提供数据保密性和一致性保护。&emsp;&emsp;我们先来分析基于ECDHE_RSA密钥交换算法的握手过程，在这之前先来解释一下ECDHE是什么。ECDHE_RSA = EC（椭圆曲线加密算法）+ DH（Diffie-Hellman密钥交换算法）+ E（临时的temporary）+ RSA（用于签名，防止中间人攻击），所以ECDHE的意思是结合椭圆曲线的生成临时会话密钥的密钥交换算法。对于这个算法的具体计算过程，这里不详细讨论。&emsp;&emsp;下图是EDCHE_RSA密钥交换算法的大致流程，接下来我会结合wireshark抓取的数据包来分析握手的过程： 在客户端和服务器开始握手之前先进行TCP三次握手，这部分的内容本文不会讨论。三次握手之后，开始握手协议，先在这展示一下抓到的所有握手包。 client hello：由于客户端对一些加解密算法的支持程度不一样，但是SSL/TLS协议传输过程中必须要求客户端与服务器端使用相同的加解密算法。所以在client hello阶段，客户端要首先告知服务端，自己支持哪些密码套件，客户端将支持的密码套件列表发送给服务端；同时客户端还会产生一个随机数，这个随机数双方都要保存（生成主密钥）；session id字段是用于维持会话，如果客户端与服务端关闭会话之后，客户端又要重新发起会话，session id可用于双方协商是否要进行重新握手过程；extension字段用于添加一些拓展功能；compress表示支持的压缩方法。 server hello：server hello是根据客户端发送过来的密码套件和压缩方法选择双方都支持的类型，同时服务器端也会生成一个随机数，双方都要保存。 certificate：该过程中服务器用私钥签名证书，发送给客户端以认证身份 server key exchange：对于ECDHE_RSA密钥交换算法来说这一过程是必须的，在此过程服务端将生成一对公钥和私钥，私钥保留（用于服务器端生成预主密钥），并将公钥发送给客户端（用于客户端生成预主密钥），同时将前一阶段所有的会话内容利用私钥进行前面发给客户端，用于验证服务端身份，防止中间人攻击。而对于RSA_RSA密钥交换算法，没有这一过程，同样有这个过程的还有DHE密钥交换算法，有没有这一过程都是却决于密钥交换算法自身。在这个数据包中，还给出了服务端生成公私钥所用的算法sec256r1 server hello done：表示server hello结束，这是个空消息 client key exchange：客户端也生成一对公钥和私钥，私钥保留（用于客户端生成预主密钥），公钥发给服务端（用于服务端生成预主密钥） change cipher spec：客户端根据交互过程中获得的信息，以及应用服务端规定的密码套件，已经生成了相应的密钥。通过这条消息，客户端告诉服务器端：从现在起，我将使用双方约定的密码规范进行通信 encrypted handshake message：客户端利用生成的密钥加密一段finishde数据传送给服务端，此数据是为了在正式传输应用之前对刚刚握手建立起来的加解密通道进行验证 new session ticket：服务端告知客户端将生成新的session ticket用于保持会话（session ticket与前面提到的session id作用类似，但两者实现方式不同） change cipher spec：同样服务端也要发送这段信息，作用与客户端一致 encrypted handshake message：作用与客户端一致至此，握手协议结束，双方开始建立加密通道。 &emsp;&emsp;值得注意的是在这个过程中客户端和服务器端都各自产生一对公钥和私钥还有一个随机数，这些都是作为生成预主密钥的元素。预主密钥分别在客户端和服务器端生成，算法的特性能够保证二者生成的预主密钥相同。那么由预主密钥如何生成会话密钥呢，这就要用到前面提到的伪随机函数，通过预主密钥我们将生成客户端验证密钥、服务器端验证密钥、客户端加密密钥、服务器端加密密钥以及客户端分组加密的初始向量和服务器端的分组加密初始向量，具体生成过程可以参考这篇博客。对基于DH算法和RSA算法的握手过程可以参见下图，也可以参考这篇博客。 前向安全&emsp;&emsp;在这里有必要提一下关于前向安全的定义：前向安全或前向保密，有时也被称为完美前向安全（Perfect Forward Secrecy，缩写：PFS），是密码学中通讯协议的安全属性，指的是长期使用的主密钥泄漏不会导致过去的会话密钥泄漏。前向安全能够保护过去进行的通讯不受密码或密钥在未来暴露的威胁。如果系统具有前向安全性，就可以保证在主密钥泄露时历史通讯的安全，即使系统遭到主动攻击也是如此。在传输层安全协议（TLS）中，提供了基于迪菲-赫尔曼密钥交换（DHE）的前向安全通讯，分别为（DHE-RSA）和DHE-DSA），还有基于椭圆曲线迪菲-赫尔曼密钥交换（ECDHE）的前向安全通讯，包括（ECDHE-RSA与ECDHE-ECDSA）。理论上，从SSLv3开始，就已经可以使用支持前向安全的密码算法进行通讯。之前我们提到ECDHE算法在sever key exchage阶段会生成一个临时的公私钥对，公钥发送给用户，私钥用于对数据进行RSA签名来验证服务器的身份，如果服务器的私钥泄露，这些会话不会受到影响，无法解密。对于有些算法而言，它在握手过程中不会有这个生成公私钥对的过程，它将使用服务器的私钥进行签名。如果服务器的私钥泄露，这些会话都将被暴露，这就是所谓的前向安全。 openssl]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>HTTPS和HTTP</tag>
        <tag>SSL安全套接层</tag>
        <tag>TLS安全传输层协议</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[K近邻算法详解]]></title>
    <url>%2FKNN.html%2F</url>
    <content type="text"><![CDATA[摘要: K近邻（简称KNN）是一种基于统计的数据挖掘算法，它是在一组历史数据记录中寻找一个或者若干个与当前记录最相似的历史记录的特征值来预测当前记录的未知的特征值，因此具有直观、无需先验统计知识等特点，同时K近邻算法适用于分类和回归两种不同的应用场景，本文主要介绍K近邻算法在回归任务场景下的应用。 文章概览 K近邻概述 K近邻三要素 距离度量 K值选择 分类决策规则 K近邻的实现 线性查找 空间分割 kd树的生成 kd树的搜索 scikit_learn中的K近邻算法 总结 K近邻概述 &emsp;&emsp;K近邻算法简单直观，下面举一个简单的例子帮助大家理解。在一个城市当，居住着许多不同民族的居民，相同民族的人们大多聚集在一起，形成一个小型的部落。现在你想知道其中一个部落是属于哪个民族的，并且你已经掌握很多关于部落和民族的信息，你会怎么做？其实我们可以通过观察这个部落的人们的生活习惯、节日风俗、衣着服饰等特点，在与我们掌握其他部落的特点进行对比，找出与该部落在这些方面最接近的几个部落（已知这几个部落分别属于哪个民族），如果这几个部落的多数属于哪个民族，那么在很大程度上我们可以猜测该部落可能也属于这个民族，从而得到我们想要的答案。&emsp;&emsp;对于K近邻稍微正式一点的描述是：给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最近邻的K个实例，这K个实例的多数属于某个类，就把该输入实例分为这个类。从这段描述中我们可以看出，K近邻算法的学习过程只是简单的存储已知的训练数据，当遇到新的查询实例时，再从存储器中取出一系列相似的实例，用来分类新的查询实例。我们把K近邻算法的这种分类特点称为消极学习方法,具有同样特点的学习算法还有局部加权回归，它的优点在于不是在整个实例空间上一次性的估计目标函数，而是针对每个待分类的新实例做出局部的和相异的估计。而与之对应的分类算法，我们称之为积极学习方法，例如：支持向量机、神经网络等等，它的特点是在新的查询实例到来之前，通过训练实例总结归纳出相似判断的目标函数。&emsp;&emsp;K近邻同样可以应用于回归任务。K近邻做分类预测时，一般是选择多数表决法，即训练集里和预测的样本特征最近的K个样本，预测为里面有最多类别数的类别。而K近邻做回归时，一般是选择平均法，即最近的K个样本的样本输出的平均值作为回归预测值。由于两者区别不大，虽然本文主要是讲解K近邻的分类方法，但思想对K近邻的回归方法也适用。 K近邻三要素 距离度量&emsp;&emsp;回到刚才那个例子，我们假设从生活习惯、节日风俗、衣着服饰、宗教信仰等多个方面来考察部落之间的相似程度。所谓的相似程度用另外一种说法来表达即差异，差异越小，相似程度越大。在机器学习中，我们使用距离来度量差异。一般情况下我们采用欧式距离来度量差异（其他的距离度量方式如曼哈顿距离等同样适用）。欧式距离： 设特征空间\({\chi}\)是\(n\)维实数向量空间\(R^n,x_i,x_j\)属于\({\chi}\)，\(x_i=(x^1_i,x^2_i,…,x^n_i),x_j=(x^1_j,x^2_j,…,x^n_j),x_i,x_j\)的欧式距离定义为$$\sqrt{\sum_{l=1}^{n}|x_i^l-x_j^l|^2}$$&emsp;&emsp;刚才说到我们将通过生活习惯、节日风俗、衣着服饰、宗教信仰等多个方面来考察部落之间的相似程度，但是现在我们需要考虑这样一种情况，我们观察发现这些部落虽然在有些方面存在很大的差异，但是这些差异却不能成为区分不同民族的依据，比如说，A和B两个部落都属于C民族，但是A部落信仰D教，B部落信仰E教。也就是说，应用k-近邻的一个实践问题是，实例间的距离是根据实例的所有属性计算的，但是这些属性当中存在着对分类无关的属性，这些无关的属性可能在实例空间中相距很远，这样一来近邻间的距离会被大量的不相关属性所支配。这种由于存在很多不相关属性所导致的难题，有时被称为维度灾难。解决该问题的一个方法是，当计算两个实例间的距离时对每个属性加权，从不断的测试中获得启发，给对分类影响大的属性赋予更高的权值。 K值选择&emsp;&emsp;K值的选择会对K近邻法的结果产生巨大的影响。如果选择较小的K值，学习的近似误差会减小，只有与输入实例较近的训练实例才会对预测结果起作用，这样做存在的问题是预测结果对近邻点过于敏感，如果近邻点恰巧是噪声，预测结果就会出错。如果选择较大的K值，其优点是可以减少学习得估计误差，缺点是与输入实例较远的训练实例也会对预测起作用。K值选择的原则往往是经过大量独立测试数据、多个模型来验证最佳选择。 分类决策规则&emsp;&emsp;K近邻中的分类决策往往是多数表决，即由输入实例的K个近邻的训练实例中的多数类决定输入实例的类。这样的决策规则存在一个问题，假设我们现在已知A、B两个部落属于同一个民族，C、D、E三个部落属于同一个民族。为了测试我们的模型，我们将A部落作为实例，输入到模型中进行测试，K值设为4。经过计算我们发现，得到的K个近邻实例分别为B、C、D、E，并且A、B部落之间的特征距离很小，而A与C、D、E三个部落之间的特征距离很大。但是由于分类决策规则是依据多数进行表决的，所以我们最终会将A判断为与C、D、E部落相同的民族。由此可以看出，多数表决的决策规则是不合理的。解决这一问题的方法是对距离进行加权，B部落与A部落的差异比较小，所以在K个实例当中B部落应该对最终的决策产生更大的影响，而距离越远影响力越小。 K近邻的实现 线性查找&emsp;&emsp;K近邻的核心思想是寻找与输入实例距离最近的K个实例，那么一个最朴素的想法是计算输入实例和所有训练实例之间的距离，然后从中挑选出距离最近的K个实例，这就是线性查找的思想，具体实现如下（大家可以在我的github中找到本文所有的源代码）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#!/usr/bin/env python#_*_ coding:utf-8 _*_#通过直接对k-近邻算法的描述来构建鸢尾花数据集的模型，并利用该模型对鸢尾花类型进行预测import numpy as npimport randomimport operatorfrom init_data import load_datadef data_split(): """ data_split函数的主要作用是将原始数据分为训练数据和测试数据，其中训练数据和测试数据的比例为2：1 """ x_data,y_data = load_data() x_training = [] x_test= [] y_training = [] y_test = [] for i in range(len(x_data)): if random.random() &gt; 0.67: x_training.append(x_data[i]) y_training.append(y_data[i]) else: x_test.append(x_data[i]) y_test.append(y_data[i]) x_training = np.array(x_training) y_training = np.array(y_training) x_test = np.array(x_test) y_test = np.array(y_test) return (x_training,x_test,y_training,y_test)def euclidean_distance(x_training,row): """ euclidean_distance函数的主要功能是计算每一条测试数据和训练数据集的欧式距离 :param x_training: 训练数据集 :param row: 一条测试数据 :return: 表示欧式距离的矩阵 """ dis = np.sum((row - x_training)**2,axis=1) dis = np.sqrt(dis) return disdef predict(dis,y_training,k): """ predict函数的主要作用是通过计算所得的欧式距离的集合，从中选取k个距离最小的数据点，统计这k个数据点中各个类别所出现的次数，出现次数最多的类别即为预测值 :param dis: 表示欧式距离的矩阵 :param y_training: 训练数据的类别 :param k: 选取k个距离最近的数据 :return: 预测值 """ dis_sort = np.argsort(dis)#对欧式距离集合进行排序，返回的dis_sort表示的是排序（从小到大）后的数据在原数组中的索引 statistics = &#123;&#125;#定义字典，用于统计k个数据点中各个类别的鸢尾花出现的次数 for i in range(k): rank = dis_sort[i] if y_training[rank] in statistics: statistics[y_training[rank]] = statistics[y_training[rank]] + 1 else: statistics[y_training[rank]] = 1 sort_statis = sorted(statistics.items(), key=operator.itemgetter(1), reverse=True)#对statistics字典按照value进行排序（从大到小） y_predict = sort_statis[0][0] return y_predictif __name__ == "__main__": x_training, x_test, y_training, y_test = data_split() num = 0 i = 0 for row in x_test: dis = euclidean_distance(x_training,row) y_predict = predict(dis,y_training,5) if y_predict == y_test[i]: num = num + 1 i = i + 1 print('The accuracy is &#123;0:1f&#125;%'.format(num/i)) 空间分割&emsp;&emsp;基于线性查找的思想，存在一个严重的问题是，如果训练集合很大，计算非常耗时，这种方法在实际中难以应用。为了提高K近邻的搜索效率，我们考虑将搜索空间进行分割，通过这种方法来提高搜索效率，减少计算距离的次数。具体的方法有很多，这里主要介绍kd树。&emsp;&emsp;关于kd树的算法和结构定义大家可以参考《统计学习方法》.pdf)和这篇博文,本文主要关注kd树python实现的一些细节问题。 kd树的生成 每次对子空间的划分时，怎样确定在哪个维度上进行划分：在《统计学习方法》中采用的是轮流的方式，即如果这次选择了在第i维上进行数据划分，那下一次就在第j(j≠i)维上进行划分，例如：j = (i mod k) + 1。但是这样忽略了不同属性数据之间的分散程度，有的属性值比较分散，有的属性值比较集中，如果我们以数据分布比较分散的属性作为数据分割的依据，可以更大程度的分割数据，这样更有利于提高搜索的效率。方差可以衡量数据集合的分散程度，所以一般情况下我们采用最大方差分割法对数据集合进行分割。 以下是kd树生成算法的python描述，代码标注了详细的解释，可以在我的github中找到完整的代码。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960def splitdata(data): """ splitdata函数的作用是对输入数据集合进行分割，具体规则：求出方差值最大的那一维特征，然后将整个数据集合根据这一维特征进行排序，中位数为分割点 :param data: 数据集合 :return: 分割数据的属性，数据分割点，分割后两个部分的数据集合 """ n,m = np.shape(data) #获取numpy矩阵维度 right_data = [] left_data = [] num = 0 row_mean = np.sum(data,axis=0) / n #求矩阵每一列的平均值 row_variance = np.sum((data - row_mean)**2,axis=0) #求矩阵每一列的方差 max_row_variance = np.where(row_variance == np.max(row_variance))[0][0] #方差值最大的那一列的索引 sort_data = np.argsort(data,axis=0) #data矩阵按照列排序，返回排序后的对应的索引 split_row = sort_data[:,max_row_variance] #方差值最大的那一列排序后的索引值 split_index = int(n/2) #中位数 for line in split_row: #将data中的数据分成两个部分，索引排在中位数之前的放进left_data,反之放进right_data if num &gt; split_index: if right_data == []: right_data = data[line,:] right_data = np.array([right_data]) else: right_data = np.concatenate((right_data,[data[line,:]]),axis=0) elif num &lt; split_index: if left_data == []: left_data = data[line,:] left_data = np.array([left_data]) else: left_data = np.concatenate((left_data,[data[line,:]]),axis=0) num = num + 1 #用于计数 split_data = data[split_row[split_index]] #取对应原始数据中的分割点值 print("分割结点为：",split_data,"--------- 分割维度为：",max_row_variance) return(max_row_variance,split_data,right_data,left_data) #返回值分别为分割数据的属性，数据分割点，分割后两个部分的数据class KNode(object): """ 定义节点类 """ def __init__(self,row = None,point = None,right = None,left = None,parent = None): self.row = row #分割数据集合的特征 self.point = point #数据分割点 self.right = right #右子树 self.left = left #左子树def create_tree(dataset,knode): """ create_tree函数的主要作用是通过递归的方式来建立kd树 :param dataset: 数据集合 :param knode: 根结点 :return: 返回kd树 """ length = len(dataset) if length == 0: return row,point,right_data,left_data = splitdata(dataset) knode = KNode(row,point) knode.right = create_tree(right_data,knode.right) knode.left = create_tree(left_data,knode.left) return knode kd树的搜索 kd树的搜索分为两个过程，首先找出包含输入实例的叶子结点，然后在从叶子结点回溯寻找K个近邻实例。在寻找叶子结点的过程中，我们会建立三个列表，一个列表用于存储搜索路径，一个列表用于存储K个近邻点，另外一个列表用于存储K个近邻点所对应的与输入实例的距离，在搜索叶子结点的过程中就计算K近邻点有利于简化回溯过程的搜索。在该过程中，每到达一个结点，我们先将该结点加入搜索路径，然后计算该结点与输入实例之间的距离，如果K近邻点列表中不足K个结点，直接将该结点加入K近邻点列表，同时将计算的距离加入对应的距离列表；如果K近邻列表中已经有K个结点，则选择距离列表中距离最大值与该结点计算的距离进行比较。如果该结点的距离小，则删除最大距离对应的结点，加入该结点，反之无需改变。 kd树的回溯过程稍微麻烦一点,大家可以参照我给出的代码注释进行理解。在看代码的时候一定要学会去调试，可以帮助我们理解。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263def find_KNN(point,kdtree,k): """ k近邻查找 :param point: 测试数据点 :param kdtree: 建立好的kd树 :param k: k值 :return: k个近邻点 """ current = kdtree #当前节点 nodelist = [] #搜索路径 nodek = [] #存储k个近邻点与测试数据点之间的距离 nodek_point = [] #存储k个近邻点对应的值 min_dis = euclidean_distance(point,kdtree.point) print("---------------------------------------------------------------------------------------") while current: #找到测试点所对应的叶子结点，同时将搜索路径中的结点进行k近邻判断 nodelist.append(current) #将当前结点加入搜索路径 dis = euclidean_distance(point,current.point) if len(nodek) &lt; k: #nodek中不足k个结点时，直接将当前结点加入nodek_point nodek.append(dis) nodek_point.append(current.point) print(current.point,"加入k近邻列表") else: #nodek中有k个结点时，删除距离最大的哪个结点，再将该结点加入nodek_point max_dis = max(nodek) if dis &lt; max_dis: index = nodek.index(max_dis) print(current.point, "加入k近邻列表;",nodek_point[index],"离开k近邻列表") del(nodek[index]) del(nodek_point[index]) nodek.append(dis) nodek_point.append(current.point) ind = current.row #该结点进行分割时的特征 if point[ind] &gt;= current.point[ind]: current = current.right else: current = current.left while nodelist: #回溯寻找k近邻 back_point = nodelist.pop() ind = back_point.row max_dis = max(nodek) if len(nodek) &lt; k or abs(point[ind] - back_point.point[ind])&lt;max_dis: #如果nodek_point中存储的节点数少于k个，或者测试数据点和当前结点在分割特征维度上的差值的绝对值小于k近邻中的最大距离 if point[ind] &lt;= back_point.point[ind]: #注意理解这一段判断的代码，因为在之前寻找叶子结点的过程中，我们决定搜索路径的判断方法是大于即搜索右子树，小于即搜索左子树，这里的判断恰恰相反，是为了遍历之前没有搜索的结点 current = back_point.right else: current = back_point.left if current: nodelist.append(current) dis = euclidean_distance(point,current.point) if max_dis &gt; dis and len(nodek) == k: index = nodek.index((max_dis)) print(current.point, "加入k近邻列表;", nodek_point[index], "离开k近邻列表") del(nodek[index]) del (nodek_point[index]) nodek.append(dis) nodek_point.append(current.point) elif len(nodek) &lt; k: nodek.append(dis) nodek_point.append(current.point) print(current.point, "加入k近邻列表") return nodek_point scikit_learn中的K近邻算法scikit_learn中的K近邻算法的具体解释大家可以参照scikit_learn官网的文档，这里给出一段利用scikit_learn解决鸢尾花数据集的代码。这篇文章中给出的代码都是基于UCI鸢尾花数据集实现的，大家可以比较一下这三种实现方式的预测准确率。1234567891011121314151617#!/usr/bin/env python#_*_ coding:utf-8 _*_#通过sklearn库中所提供的关于k-近邻算法相关的包来实现对鸢尾花数据集的建模与预测from init_data import load_dataimport numpy as npfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.cross_validation import train_test_splitx_data,y_data = load_data() #获取数据x_training,x_test,y_training,y_test = train_test_split(x_data,y_data,random_state=10) #将数据分为训练集和测试集estimotor = KNeighborsClassifier() #构造k-近邻分类器estimotor.fit(x_training,y_training) #训练模型y_predicted = estimotor.predict(x_test) #用训练的模型进行预测accuracy = np.mean(y_test == y_predicted)*100 #计算预测结果的准确率print('The accuracy is &#123;0:1f&#125;%'.format(accuracy)) 总结K近邻算法的优点在于 算法简单直观，易于实现 K近邻在进行类别决策时只于少量的相邻样本有关，可以避免样本数量不平衡问题 K近邻最直接的利用了样本之间的关系，减少了类别特征选择不当对分类结果造成的不利影响，可以最大程度减少分类过程中的误差项 同时K近邻算法存在的问题也很突出 当样本数量大、特征多的时候计算量非常大 样本不平衡的时候，对稀有类别的预测准确率降低 预测速度慢 &emsp;&emsp;花了两天的时间找资料、写代码，又花了一天的时间写文章，终于结束了！有一点不太满意的地方是对kd树的回溯没有进行详尽的描述，原因是真的找不出一种好的描述方法，文字描述看起来累，用图表的话工作量太大，大家可以看看我推荐的博文结合代码，理解起来也不会太难。好了，到这里结束了，好好加油，坚持！]]></content>
      <categories>
        <category>机器学习算法</category>
      </categories>
      <tags>
        <tag>KNN</tag>
        <tag>KD树</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建博客：HEXO+GITHUB+CODING]]></title>
    <url>%2Fhex.html%2F</url>
    <content type="text"><![CDATA[摘要: 进入计算机行业已经好几年了，这么多年的摸爬滚打，我终于意识到了一个血的教训:好记性不如烂键盘!当我们遇到问题并解决问题之后，我们应该及时的把我们处理问题的过程记录下来，一来可以防止我们在此遇到同样的问题时又要重复造轮子，二来可以为遇到同样问题的小伙伴提供经验，所以对于我们来说有一个属于自己的博客尤为重要。本文记录的是搭建hexo个人博客平台过程中遇到的一些问题和心得，希望能对小伙伴们有所启发。 文章概览 HEXO简介 静态博客与动态博客 基本流程 运行机制 HEXO NEXT主题美化 HEXO部署到GITHUB 提交搜索引擎 提交谷歌搜索引擎 提交百度搜索引擎 总结 HEXO简介Hexo是一个基于node.js开发的快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。hexo具有以下这些特性： hexo基于node.js，非常小巧，安装部署简单 hexo开源，主题丰富，插件丰富，自定义能力强 hexo支持markdown语法，易于博客写作 hexo是纯静态博客，不需要数据库支持 静态博客系统与动态博客系统一个网站最基础的部分就是网页，如果想从HTML页面写起，显然成本太高，好在大牛们已经做好了博客生成器来解决网页编写的问题。一般来说，博客生成器分为动态和静态两种。其中，动态博客生成器典型代表有：WordPress、FarBox、Ghost等，静态的博客生成器典型代表有：Hexo、Jekyll、Octopress、Hugo等。关于动态和静态的区别主要有以下几点： 资源占用上，静态博客相对于动态博客占用服务器资源少，可以托管在github pages上，而动态博客往往需要一台相对独立的服务器 数据管理和更新操作上，由于动态博客有独立的数据库和后台管理系统，对资源的管理和发布相对比较容易；而静态博客往往需要一些第三方平台的支持，如评论系统以及图床，数据管理更新比较繁琐。 安全性上，静态博客比动态博客安全性更好 基本流程&emsp;&emsp;这里我大致叙述一下搭建hexo博客系统的大致流程。我们首先要搭建hexo博客系统的开发环境，这里我主要讲解windows环境下的安装配置，其他系统的安装配置可以参考官方文档。1234567安装git安装node.js执行命令 npm install -g hexo-cli（安装hexo命令行工具）执行命令 hexo init [文件夹名]进入刚才初始化的文件夹，执行命令 npm install 即创建了一个原始的hexo博客系统执行命令 hexo g 生成站点文件执行命令 hexo d 把博客部署到站点 运行机制&emsp;&emsp;首先我们来分析一下hexo文件夹的结构 _config.yml:站点的配置文件 db.json:缓存文件 node_modules:安装的插件以及hexo所需要的一些node.js模块 package.json：应用程序信息，配置hexo运行需要的js包 public：生成的站点文件 scaffolds：模板文件夹，新建文章时，会默认包含对应模板内容 source：资源文件夹是存放用户资源的地方。所有的源文件都会被保存在_post文件夹中 themes：hexo站点所使用的主题 &emsp;&emsp;为了搞清楚hexo的运行机制，我们有必要了解一下hexo的模板引擎（hexo使用的模板引擎是ejs编写的），模板引擎的作用就是将界面与数据分离最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。我们可以注意到，在hexo中，source文件夹和themes文件夹是同级的，我们可以将source文件夹理解为数据库，而主题文件夹相当于界面，当执行hexo g命令时，就相当于将数据嵌入到界面中，生成静态文件public。&emsp;&emsp;具体来说在hexo中，从markdown文件到生成html的过程中大致经历了两次渲染的过程： 通过解析markdown文件，并结合站点配置文件和source目录下的相关文件，生成相应的数据对象 将生成的数据对象嵌入到themes主题中的渲染引擎生成站点文件 HEXO NEXT主题美化&emsp;&emsp;基于hexo博客系统的主题有很多，你可以在这里找到你喜欢的主题。我的博客采用的是next主题，我个人觉得next主题看上去简洁大方，用起来很舒服。这里我不会详细的介绍next主题的配置过程，我会分享一些我在配置过程中遇到的一些问题。 next主题的官方网站详细阐述了主题的基本配置过程，我也是参照它一步步进行配置的 在配置主题之前推荐大家安装一款node.js的开发工具，有利于提高效率。我安装的是webstorm，它也支持markdown文件的编写，强烈推荐（这个公司提供的开发工具都很强大，pycharm也是这个公司的产品之一）。 在配置主题的过程中要注意区分两个配置文件，一个是主题的配置文件_config.yml，一个是站点的配置文件_config.yml。因为有些配置操作实在主题的配置文件中进行的，有的实在站点的配置文件进行的，一定不能弄混了。 推荐一篇next主题美化的博文 对主题进行配置时，我的建议是每修改一项之后都在本地运行一下（先运行hexo g命令，在运行hexo s命令，在浏览器中查看），看看有没有出错，这样我们可以及时找到出错的地方。 hexo的配置文件是yaml格式的，它通过缩进来表示层级关系，修改配置文件时要主要缩进问题 HEXO部署到GITHUB&emsp;&emsp;在对主题修改完成之后，下一步的工作就是将hexo部署到github pages。在部署之前，需要做好一些准备工作，具体的操作过程可以参考这篇博客。 注册github账号，添加ssh key 在github中新建仓库，仓库名为：username.github.io 修改站点配置文件的deploy选项 执行命令hexo deploy &emsp;&emsp;在这些操作过程中我们需要注意一些问题： 在deploy的过程中可能会出现速度过慢的问题，这是由于GFW对github的限制造成的，可以通过代理或者修改hosts文件来提高访问速度 有时候会因为一些莫名其妙的问题导致deploy失败，无法解决这一问题时，我们可以通过复制生成的public文件，通过git提交到远程仓库，为了使整个过程更加自动化，我们可以在根目录下写一个脚本文件deploy.sh 123456hexo generate cp -R public/* chaoge123456.github.io cd chaoge123456.github.io git add . git commit -m “update” git push origin master 每次提交更新时只需要在根目录下执行命令：./deploy.sh即可 提交搜索引擎&emsp;&emsp;部署完成之后，现在我们可以通过浏览器访问到我们的博客，但是还有一件非常重要的事我们需要去完成。虽然我们可以通过浏览器访问到我们的博客，但是我们无法通过搜索引擎搜索到我们的博客，所以我们需要将我们的博客地址提交给搜索引擎。这时我们需要注意，github屏蔽了百度搜索引擎的爬虫，这也就意味着通过百度是无法搜索到我们在github上的博客（googl不存在这样的问题）。所以为了在国内也能访问到我们的博客，我们需要将我们的博客托管到国内的类似于github的平台——coding（coding的博客地址和github的博客地址不一样，所以接下来我们需要做的是将github的博客地址提交给google，将coding的地址提交给百度）。部署到coding的流程跟github类似，为了将站点同时更新到coding和github，我们需要在站点配置文件下的deploy选项的repo同时添加github和coding的远程仓库123456deploy: type: git repo: github: git@github.com:chaoge123456/chaoge123456.github.io.git coding: git@git.coding.net:chao3236gmailco/chao3236gmailco.git branch: master 提交谷歌搜索引擎Google搜索引擎提交入口 提交百度搜索引擎百度搜索引擎入口&emsp;&emsp;将站点地址提交给搜索引擎的步骤也比较简单，具体操作可以参考这篇博文,这个过程中需要注意的问题是： 将验证文件提交给站点时，有人会认为，直接将验证文件放入public文件夹中然后执行hexo g和hexo d就可以将验证文件提交的远程仓库。这样做确实可以将验证文件提交的远程仓库，但是需要注意的是此时的验证文件经过了hexo渲染，和原来的验证文件已经不一致，这样的验证文件时无效的 正确的做法是通过git clone获得远程仓库，在将验证文件加入刚刚获得的远程文件，然后通过向远程仓库提交该文件 验证完毕后，要向搜索引擎提交站点地图，方便爬虫爬取站点 总结&emsp;&emsp;HEXO+GITHUB+CODING博客搭建大概就是这些流程，希望大家看了我的博客会有所收获。这是我博客上的第一篇博文，确实不容易，希望以后能好好坚持下去吧。好了，夜已深了，晚安世界！]]></content>
      <categories>
        <category>HEXO相关</category>
      </categories>
      <tags>
        <tag>HEXO部署和美化</tag>
        <tag>github pages</tag>
        <tag>建站教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown书写规范]]></title>
    <url>%2Fmarkdown%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83.html%2F</url>
    <content type="text"><![CDATA[NOTE: This is Traditional Chinese Edition Document ofMarkdown Syntax. If you are seeking for English EditionDocument. Please refer to Markdown: Syntax. Markdown: Syntax 概述 哲學 行內 HTML 特殊字元自動轉換 區塊元素 段落和換行 標題 區塊引言 清單 程式碼區塊 分隔線 區段元素 連結 強調 程式碼 圖片 其它 跳脫字元 自動連結 感謝 注意：這份文件是用 Markdown 寫的，你可以看看它的原始檔 。 概述 哲學 Markdown 的目標是實現「易讀易寫」。 不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，然而最大靈感來源其實是純文字的電子郵件格式。 因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。 行內 HTML Markdown 的語法有個主要的目的：用來作為一種網路內容的寫作用語言。 Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點不是要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種發佈的格式，Markdown 是一種編寫的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。 不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。 只有區塊元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等標籤，必須在前後加上空行，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 &lt;p&gt; 標籤。 舉例來說，在 Markdown 文件裡加上一段 HTML 表格： This is a regular paragraph. &lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; This is another regular paragraph. 請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的*強調*。 HTML 的區段標籤如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的 &lt;a&gt; 或 &lt;img&gt; 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。 HTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。 特殊字元自動轉換 在 HTML 文件中，有兩個字元需要特殊處理： &lt; 和 &amp; 。 &lt; 符號用於起始標籤，&amp; 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 符號其實很容易讓寫作網路文件的人感到困擾，如果你要打「AT&amp;T」 ，你必須要寫成「AT&amp;amp;T」 ，還得轉換網址內的 &amp; 符號，如果你要連結到： http://images.google.com/images?num=30&amp;q=larry+bird 你必須要把網址轉成： http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到連結標籤的 href 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。 Markdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 &amp; 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 &amp;amp;。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫： &amp;copy; Markdown 將不會對這段文字做修改，但是如果你這樣寫： AT&amp;T Markdown 就會將它轉為： AT&amp;amp;T 類似的狀況也會發生在 &lt; 符號上，因為 Markdown 支援 行內 HTML ，如果你是使用 &lt; 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫： 4 &lt; 5 Markdown 將會把它轉換為： 4 &amp;lt; 5 不過需要注意的是，code 範圍內，不論是行內還是區塊， &lt; 和 &amp; 兩個符號都一定會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 &lt; 和 &amp; 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。） 區塊元素 段落和換行 一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。 「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 &lt;br /&gt; 標籤。 如果你真的想要插入 &lt;br /&gt; 標籤的話，在行尾加上兩個以上的空白，然後按 enter。 是的，這確實需要花比較多功夫來插入 &lt;br /&gt; ，但是「每個換行都轉換為 &lt;br /&gt;」的方法在 Markdown 中並不適合， Markdown 中 email 式的 區塊引言 和多段落的 清單 在使用換行來排版的時候，不但更好用，還更好閱讀。 標題 Markdown 支援兩種標題的語法，Setext 和 atx 形式。 Setext 形式是用底線的形式，利用 = （最高階標題）和 - （第二階標題），例如： This is an H1 ============= This is an H2 ------------- 任何數量的 = 和 - 都可以有效果。 Atx 形式則是在行首插入 1 到 6 個 # ，對應到標題 1 到 6 階，例如： # This is an H1 ## This is an H2 ###### This is an H6 你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 #，而行尾的 # 數量也不用和開頭一樣（行首的井字數量決定標題的階數）： # This is an H1 # ## This is an H2 ## ### This is an H3 ###### Blockquotes Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing. Markdown 也允許你只在整個段落的第一行最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 &gt; ： &gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. 引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等： &gt; ## This is a header. &gt; &gt; 1. This is the first list item. &gt; 2. This is the second list item. &gt; &gt; Here&apos;s some example code: &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇增加引言階層。 清單 Markdown 支援有序清單和無序清單。 無序清單使用星號、加號或是減號作為清單標記： * Red * Green * Blue 等同於： + Red + Green + Blue 也等同於： - Red - Green - Blue 有序清單則使用數字接著一個英文句點： 1. Bird 2. McHale 3. Parish 很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為： &lt;ol&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;McHale&lt;/li&gt; &lt;li&gt;Parish&lt;/li&gt; &lt;/ol&gt; 如果你的清單標記寫成： 1. Bird 1. McHale 1. Parish 或甚至是： 3. Bird 1. McHale 8. Parish 你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。 如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。 清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。 要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你很懶，那也不一定需要： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 &lt;p&gt;標籤包起來，舉例來說： * Bird * Magic 會被轉換為： &lt;ul&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;Magic&lt;/li&gt; &lt;/ul&gt; 但是這個： * Bird * Magic 會被轉換為： &lt;ul&gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; 清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ： 1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許： * This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list. 如果要在清單項目內放進引言，那 &gt; 就需要縮排： * A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放程式碼區塊的話，該區塊就需要縮排兩次，也就是 8 個空白或是兩個 tab： * A list item with a code block: &lt;code goes here&gt; 當然，項目清單很可能會不小心產生，像是下面這樣的寫法： 1986. What a great season. 換句話說，也就是在行首出現數字-句點-空白，要避免這樣的狀況，你可以在句點前面加上反斜線。 1986\. What a great season. 程式碼區塊 和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 &lt;pre&gt; 和 &lt;code&gt; 標籤來把程式碼區塊包起來。 要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入： This is a normal paragraph: This is a code block. Markdown 會轉換成： &lt;p&gt;This is a normal paragraph:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;This is a code block. &lt;/code&gt;&lt;/pre&gt; 這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 會被轉換為： &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beep end tell &lt;/code&gt;&lt;/pre&gt; 一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。 在程式碼區塊裡面， &amp; 、 &lt; 和 &gt; 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如： &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 會被轉換為： &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation &amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt; 程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。 分隔線 你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線： * * * *** ***** - - - --------------------------------------- 區段元素 連結 Markdown 支援兩種形式的連結語法： 行內和參考兩種形式。 不管是哪一種，連結的文字都是用 [方括號] 來標記。 要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 會產生： &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt; 如果你是要連結到同樣主機的資源，你可以使用相對路徑： See my [About](/about/) page for details. 參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤： This is [an example][id] reference-style link. 你也可以選擇性地在兩個方括號中間加上空白： This is [an example] [id] reference-style link. 接著，在文件的任意處，你可以把這個標籤的連結內容定義出來： [id]: http://example.com/ &quot;Optional Title Here&quot; 連結定義的形式為： 方括號，裡面輸入連結的辨識用標籤 接著一個冒號 接著一個以上的空白或 tab 接著連結的網址 選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著 下面這三種連結的定義都是相同： [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) 請注意：有一個已知的問題是 Markdown.pl 1.0.1 會忽略單引號包起來的連結 title。 連結網址也可以用方括號包起來： [id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看： [id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。 連結辨識標籤可以有字母、數字、空白和標點符號，但是並不區分大小寫，因此下面兩個連結是一樣的： [link text][a] [link text][A] 預設的連結標籤功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 “Google” 連結到 google.com，你可以簡化成： [Google][] 然後定義連結內容： [Google]: http://google.com/ 由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字： Visit [Daring Fireball][] for more information. 然後接著定義連結： [Daring Fireball]: http://daringfireball.net/ 連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。 下面是一個參考式連結的範例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用連結名稱的方式寫： I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面兩種寫法都會產生下面的 HTML。 &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt; 下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用： I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;) than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or [MSN](http://search.msn.com/ &quot;MSN Search&quot;). 參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。 使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。 強調 Markdown 使用星號（*）和底線（_）作為標記強調字詞的符號，被 * 或 _ 包圍的字詞會被轉成用 &lt;em&gt; 標籤包圍，用兩個 * 或 _ 包起來的話，則會被轉成 &lt;strong&gt;，例如： *single asterisks* _single underscores_ **double asterisks** __double underscores__ 會轉成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。 強調也可以直接插在文字中間： un*frigging*believable 但是如果你的 * 和 _ 兩邊都有空白的話，它們就只會被當成普通的符號。 如果要在文字前後直接插入普通的星號或底線，你可以用反斜線： \*this text is surrounded by literal asterisks\* 程式碼 如果要標記一小段行內程式碼，你可以用反引號把它包起來（`），例如： Use the `printf()` function. 會產生： &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt; 如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段： ``There is a literal backtick (`) here.`` 這段語法會產生： &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號： A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 會產生： &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt; 在程式碼區段內，&amp; 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段： Please don&apos;t use any `&lt;blink&gt;` tags. 轉為： &lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt; 你也可以這樣寫： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 以產生： &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 圖片 很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。 Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： 行內和參考。 行內圖片的語法看起來像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 詳細敘述如下： 一個驚嘆號 ! 接著一對方括號，裡面放上圖片的替代文字 接著一對普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上選擇性的 ‘title’ 文字。 參考式的圖片語法則長得像這樣： ![Alt text][id] 「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣： [id]: url/to/image &quot;Optional title attribute&quot; 到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 &lt;img&gt; 標籤。 其它 自動連結 Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如： &lt;http://example.com/&gt; Markdown 會轉為： &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt; 自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如： &lt;address@example.com&gt; Markdown 會轉成： &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65; &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111; &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61; &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt; 在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。 （這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。） 跳脫字元 Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 &lt;em&gt; 標籤），你可以在星號的前面加上反斜線： \*literal asterisks\* Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號： \ 反斜線 ` 反引號 * 星號 _ 底線 {} 大括號 [] 方括號 () 括號 # 井字號 + 加號 - 減號 . 英文句點 ! 驚嘆號]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
